"{\"kind\": \"Listing\", \"data\": {\"after\": \"t3_1kt69vh\", \"dist\": 5, \"modhash\": null, \"geo_filter\": \"\", \"children\": [{\"kind\": \"t3\", \"data\": {\"approved_at_utc\": null, \"subreddit\": \"rust\", \"selftext\": \"\", \"author_fullname\": \"t2_2oghhhfw\", \"saved\": false, \"mod_reason_title\": null, \"gilded\": 0, \"clicked\": false, \"title\": \"Making the rav1d Video Decoder 1% Faster\", \"link_flair_richtext\": [], \"subreddit_name_prefixed\": \"r/rust\", \"hidden\": false, \"pwls\": 6, \"link_flair_css_class\": \"\", \"downs\": 0, \"top_awarded_type\": null, \"hide_score\": false, \"name\": \"t3_1ksnljw\", \"quarantine\": false, \"link_flair_text_color\": \"dark\", \"upvote_ratio\": 0.97, \"author_flair_background_color\": null, \"subreddit_type\": \"public\", \"ups\": 316, \"total_awards_received\": 0, \"media_embed\": {}, \"author_flair_template_id\": null, \"is_original_content\": false, \"user_reports\": [], \"secure_media\": null, \"is_reddit_media_domain\": false, \"is_meta\": false, \"category\": null, \"secure_media_embed\": {}, \"link_flair_text\": \"\\ud83e\\udde0 educational\", \"can_mod_post\": false, \"score\": 316, \"approved_by\": null, \"is_created_from_ads_ui\": false, \"author_premium\": false, \"thumbnail\": \"\", \"edited\": false, \"author_flair_css_class\": null, \"author_flair_richtext\": [], \"gildings\": {}, \"content_categories\": null, \"is_self\": false, \"mod_note\": null, \"created\": 1747910757.0, \"link_flair_type\": \"text\", \"wls\": 6, \"removed_by_category\": null, \"banned_by\": null, \"author_flair_type\": \"text\", \"domain\": \"ohadravid.github.io\", \"allow_live_comments\": false, \"selftext_html\": null, \"likes\": null, \"suggested_sort\": null, \"banned_at_utc\": null, \"url_overridden_by_dest\": \"https://ohadravid.github.io/posts/2025-05-rav1d-faster/\", \"view_count\": null, \"archived\": false, \"no_follow\": false, \"is_crosspostable\": true, \"pinned\": false, \"over_18\": false, \"all_awardings\": [], \"awarders\": [], \"media_only\": false, \"link_flair_template_id\": \"682cc226-f8ea-11ed-ae05-e66f84814df3\", \"can_gild\": false, \"spoiler\": false, \"locked\": false, \"author_flair_text\": null, \"treatment_tags\": [], \"visited\": false, \"removed_by\": null, \"num_reports\": null, \"distinguished\": null, \"subreddit_id\": \"t5_2s7lj\", \"author_is_blocked\": false, \"mod_reason_by\": null, \"removal_reason\": null, \"link_flair_background_color\": \"#f2f2f2\", \"id\": \"1ksnljw\", \"is_robot_indexable\": true, \"report_reasons\": null, \"author\": \"ohrv\", \"discussion_type\": null, \"num_comments\": 24, \"send_replies\": true, \"contest_mode\": false, \"mod_reports\": [], \"author_patreon_flair\": false, \"author_flair_text_color\": null, \"permalink\": \"/r/rust/comments/1ksnljw/making_the_rav1d_video_decoder_1_faster/\", \"stickied\": false, \"url\": \"https://ohadravid.github.io/posts/2025-05-rav1d-faster/\", \"subreddit_subscribers\": 347880, \"created_utc\": 1747910757.0, \"num_crossposts\": 0, \"media\": null, \"is_video\": false}}, {\"kind\": \"t3\", \"data\": {\"approved_at_utc\": null, \"subreddit\": \"rust\", \"selftext\": \"\", \"author_fullname\": \"t2_6m5wkhu\", \"saved\": false, \"mod_reason_title\": null, \"gilded\": 0, \"clicked\": false, \"title\": \"Bevy Jam #6\", \"link_flair_richtext\": [], \"subreddit_name_prefixed\": \"r/rust\", \"hidden\": false, \"pwls\": 6, \"link_flair_css_class\": null, \"downs\": 0, \"top_awarded_type\": null, \"hide_score\": false, \"name\": \"t3_1kt03fc\", \"quarantine\": false, \"link_flair_text_color\": \"dark\", \"upvote_ratio\": 0.98, \"author_flair_background_color\": \"\", \"subreddit_type\": \"public\", \"ups\": 126, \"total_awards_received\": 0, \"media_embed\": {}, \"author_flair_template_id\": null, \"is_original_content\": false, \"user_reports\": [], \"secure_media\": null, \"is_reddit_media_domain\": false, \"is_meta\": false, \"category\": null, \"secure_media_embed\": {}, \"link_flair_text\": null, \"can_mod_post\": false, \"score\": 126, \"approved_by\": null, \"is_created_from_ads_ui\": false, \"author_premium\": false, \"thumbnail\": \"\", \"edited\": false, \"author_flair_css_class\": \"contrib\", \"author_flair_richtext\": [], \"gildings\": {}, \"content_categories\": null, \"is_self\": false, \"mod_note\": null, \"created\": 1747943389.0, \"link_flair_type\": \"text\", \"wls\": 6, \"removed_by_category\": null, \"banned_by\": null, \"author_flair_type\": \"text\", \"domain\": \"itch.io\", \"allow_live_comments\": false, \"selftext_html\": null, \"likes\": null, \"suggested_sort\": null, \"banned_at_utc\": null, \"url_overridden_by_dest\": \"https://itch.io/jam/bevy-jam-6\", \"view_count\": null, \"archived\": false, \"no_follow\": false, \"is_crosspostable\": true, \"pinned\": false, \"over_18\": false, \"all_awardings\": [], \"awarders\": [], \"media_only\": false, \"can_gild\": false, \"spoiler\": false, \"locked\": false, \"author_flair_text\": \"bevy\", \"treatment_tags\": [], \"visited\": false, \"removed_by\": null, \"num_reports\": null, \"distinguished\": null, \"subreddit_id\": \"t5_2s7lj\", \"author_is_blocked\": false, \"mod_reason_by\": null, \"removal_reason\": null, \"link_flair_background_color\": \"\", \"id\": \"1kt03fc\", \"is_robot_indexable\": true, \"report_reasons\": null, \"author\": \"_cart\", \"discussion_type\": null, \"num_comments\": 8, \"send_replies\": true, \"contest_mode\": false, \"mod_reports\": [], \"author_patreon_flair\": false, \"author_flair_text_color\": \"dark\", \"permalink\": \"/r/rust/comments/1kt03fc/bevy_jam_6/\", \"stickied\": false, \"url\": \"https://itch.io/jam/bevy-jam-6\", \"subreddit_subscribers\": 347880, \"created_utc\": 1747943389.0, \"num_crossposts\": 0, \"media\": null, \"is_video\": false}}, {\"kind\": \"t3\", \"data\": {\"approved_at_utc\": null, \"subreddit\": \"rust\", \"selftext\": \"Hey r/rust! \\ud83d\\udc4b\\n\\nI've been working on a file watcher called **Flash** and wanted to share it with the community. I know there are already great tools like `watchexec` out there, but I had some specific needs that led me to build this.\\n\\n## What it does\\nThink `nodemon` but more general purpose and written in Rust. It watches files and runs commands when they change - pretty standard stuff.\\n\\n## Why I built it\\nI was frustrated with slow startup times when using file watchers in my development workflow. Even a few extra milliseconds add up when you're restarting processes hundreds of times a day. I also wanted something with better glob pattern support and YAML config files.\\n\\n## The numbers (please don't roast me if I messed up the benchmarks \\ud83d\\ude05)\\n- **Startup**: ~2.1ms (vs 3.6ms for watchexec, ~35ms for nodemon)\\n- **Binary size**: 1.9MB (vs 6.7MB for watchexec)\\n- **Memory**: Pretty low footprint\\n\\nI used `hyperfine` for timing and tried to be fair with the comparisons, but I'm sure there are edge cases I missed.\\n\\n## What makes it different\\n- **Fast mode**: `--fast` flag skips unnecessary output for maximum speed\\n- **Flexible patterns**: Good glob support with include/exclude patterns\\n- **Config files**: YAML configs for complex setups\\n- **Process management**: Can restart long-running processes or spawn new ones\\n- **Built-in stats**: Performance monitoring if you're into that\\n\\n## Example usage\\n```bash\\n# Basic usage\\nflash -w \\\"src/**/*.rs\\\" -c \\\"cargo test\\\"\\n\\n# Web dev with restart\\nflash -w \\\"src/**\\\" -e \\\"js,jsx,ts\\\" -r -c \\\"npm start\\\"\\n\\n# With config file\\nflash -f flash.yaml\\n```\\n\\n## The honest truth\\n- It's not revolutionary - file watchers are a solved problem\\n- Probably has bugs I haven't found yet\\n- The \\\"blazingly fast\\\" claim might be a bit much, but hey, it's Rust \\ud83e\\udd80\\n- I'm sure there are better ways to do some things\\n\\n## What I'd love feedback on\\n1. **Performance**: Did I benchmark this fairly? Any obvious optimizations I missed?\\n2. **API design**: Does the CLI feel intuitive?\\n3. **Use cases**: What features would actually be useful vs just bloat?\\n4. **Code quality**: Always looking to improve my Rust\\n\\n## Links\\n- **GitHub**: https://github.com/sage-scm/Flash\\n- **Crates.io**: `cargo install flash-watcher`\\n- **Benchmarks**: [PERFORMANCE.md](https://github.com/sage-scm/Flash/blob/main/PERFORMANCE.md) (with actual numbers)\\n\\nI'm not trying to replace watchexec or anything - just scratching my own itch and learning Rust. If it's useful to others, great! If not, at least I learned a lot building it.\\n\\nWould love any feedback, criticism, or suggestions. Thanks for reading! \\ud83d\\ude4f\\n\\n---\\n\\n*P.S. - Yes, I know \\\"blazingly fast\\\" is a meme at this point, but the startup time difference is actually noticeable in practice*\\n\", \"author_fullname\": \"t2_havs7\", \"saved\": false, \"mod_reason_title\": null, \"gilded\": 0, \"clicked\": false, \"title\": \"I built a file watcher in Rust that's faster than watchexec (and way faster than nodemon) - would love feedback\", \"link_flair_richtext\": [], \"subreddit_name_prefixed\": \"r/rust\", \"hidden\": false, \"pwls\": 6, \"link_flair_css_class\": null, \"downs\": 0, \"top_awarded_type\": null, \"hide_score\": false, \"name\": \"t3_1ktagin\", \"quarantine\": false, \"link_flair_text_color\": \"dark\", \"upvote_ratio\": 0.81, \"author_flair_background_color\": null, \"subreddit_type\": \"public\", \"ups\": 72, \"total_awards_received\": 0, \"media_embed\": {}, \"author_flair_template_id\": null, \"is_original_content\": false, \"user_reports\": [], \"secure_media\": null, \"is_reddit_media_domain\": false, \"is_meta\": false, \"category\": null, \"secure_media_embed\": {}, \"link_flair_text\": null, \"can_mod_post\": false, \"score\": 72, \"approved_by\": null, \"is_created_from_ads_ui\": false, \"author_premium\": false, \"thumbnail\": \"\", \"edited\": false, \"author_flair_css_class\": null, \"author_flair_richtext\": [], \"gildings\": {}, \"content_categories\": null, \"is_self\": true, \"mod_note\": null, \"created\": 1747973115.0, \"link_flair_type\": \"text\", \"wls\": 6, \"removed_by_category\": null, \"banned_by\": null, \"author_flair_type\": \"text\", \"domain\": \"self.rust\", \"allow_live_comments\": false, \"selftext_html\": \"&lt;!-- SC_OFF --&gt;&lt;div class=\\\"md\\\"&gt;&lt;p&gt;Hey &lt;a href=\\\"/r/rust\\\"&gt;r/rust&lt;/a&gt;! \\ud83d\\udc4b&lt;/p&gt;\\n\\n&lt;p&gt;I&amp;#39;ve been working on a file watcher called &lt;strong&gt;Flash&lt;/strong&gt; and wanted to share it with the community. I know there are already great tools like &lt;code&gt;watchexec&lt;/code&gt; out there, but I had some specific needs that led me to build this.&lt;/p&gt;\\n\\n&lt;h2&gt;What it does&lt;/h2&gt;\\n\\n&lt;p&gt;Think &lt;code&gt;nodemon&lt;/code&gt; but more general purpose and written in Rust. It watches files and runs commands when they change - pretty standard stuff.&lt;/p&gt;\\n\\n&lt;h2&gt;Why I built it&lt;/h2&gt;\\n\\n&lt;p&gt;I was frustrated with slow startup times when using file watchers in my development workflow. Even a few extra milliseconds add up when you&amp;#39;re restarting processes hundreds of times a day. I also wanted something with better glob pattern support and YAML config files.&lt;/p&gt;\\n\\n&lt;h2&gt;The numbers (please don&amp;#39;t roast me if I messed up the benchmarks \\ud83d\\ude05)&lt;/h2&gt;\\n\\n&lt;ul&gt;\\n&lt;li&gt;&lt;strong&gt;Startup&lt;/strong&gt;: ~2.1ms (vs 3.6ms for watchexec, ~35ms for nodemon)&lt;/li&gt;\\n&lt;li&gt;&lt;strong&gt;Binary size&lt;/strong&gt;: 1.9MB (vs 6.7MB for watchexec)&lt;/li&gt;\\n&lt;li&gt;&lt;strong&gt;Memory&lt;/strong&gt;: Pretty low footprint&lt;/li&gt;\\n&lt;/ul&gt;\\n\\n&lt;p&gt;I used &lt;code&gt;hyperfine&lt;/code&gt; for timing and tried to be fair with the comparisons, but I&amp;#39;m sure there are edge cases I missed.&lt;/p&gt;\\n\\n&lt;h2&gt;What makes it different&lt;/h2&gt;\\n\\n&lt;ul&gt;\\n&lt;li&gt;&lt;strong&gt;Fast mode&lt;/strong&gt;: &lt;code&gt;--fast&lt;/code&gt; flag skips unnecessary output for maximum speed&lt;/li&gt;\\n&lt;li&gt;&lt;strong&gt;Flexible patterns&lt;/strong&gt;: Good glob support with include/exclude patterns&lt;/li&gt;\\n&lt;li&gt;&lt;strong&gt;Config files&lt;/strong&gt;: YAML configs for complex setups&lt;/li&gt;\\n&lt;li&gt;&lt;strong&gt;Process management&lt;/strong&gt;: Can restart long-running processes or spawn new ones&lt;/li&gt;\\n&lt;li&gt;&lt;strong&gt;Built-in stats&lt;/strong&gt;: Performance monitoring if you&amp;#39;re into that&lt;/li&gt;\\n&lt;/ul&gt;\\n\\n&lt;h2&gt;Example usage&lt;/h2&gt;\\n\\n&lt;p&gt;```bash&lt;/p&gt;\\n\\n&lt;h1&gt;Basic usage&lt;/h1&gt;\\n\\n&lt;p&gt;flash -w &amp;quot;src/*&lt;em&gt;/&lt;/em&gt;.rs&amp;quot; -c &amp;quot;cargo test&amp;quot;&lt;/p&gt;\\n\\n&lt;h1&gt;Web dev with restart&lt;/h1&gt;\\n\\n&lt;p&gt;flash -w &amp;quot;src/**&amp;quot; -e &amp;quot;js,jsx,ts&amp;quot; -r -c &amp;quot;npm start&amp;quot;&lt;/p&gt;\\n\\n&lt;h1&gt;With config file&lt;/h1&gt;\\n\\n&lt;p&gt;flash -f flash.yaml\\n```&lt;/p&gt;\\n\\n&lt;h2&gt;The honest truth&lt;/h2&gt;\\n\\n&lt;ul&gt;\\n&lt;li&gt;It&amp;#39;s not revolutionary - file watchers are a solved problem&lt;/li&gt;\\n&lt;li&gt;Probably has bugs I haven&amp;#39;t found yet&lt;/li&gt;\\n&lt;li&gt;The &amp;quot;blazingly fast&amp;quot; claim might be a bit much, but hey, it&amp;#39;s Rust \\ud83e\\udd80&lt;/li&gt;\\n&lt;li&gt;I&amp;#39;m sure there are better ways to do some things&lt;/li&gt;\\n&lt;/ul&gt;\\n\\n&lt;h2&gt;What I&amp;#39;d love feedback on&lt;/h2&gt;\\n\\n&lt;ol&gt;\\n&lt;li&gt;&lt;strong&gt;Performance&lt;/strong&gt;: Did I benchmark this fairly? Any obvious optimizations I missed?&lt;/li&gt;\\n&lt;li&gt;&lt;strong&gt;API design&lt;/strong&gt;: Does the CLI feel intuitive?&lt;/li&gt;\\n&lt;li&gt;&lt;strong&gt;Use cases&lt;/strong&gt;: What features would actually be useful vs just bloat?&lt;/li&gt;\\n&lt;li&gt;&lt;strong&gt;Code quality&lt;/strong&gt;: Always looking to improve my Rust&lt;/li&gt;\\n&lt;/ol&gt;\\n\\n&lt;h2&gt;Links&lt;/h2&gt;\\n\\n&lt;ul&gt;\\n&lt;li&gt;&lt;strong&gt;GitHub&lt;/strong&gt;: &lt;a href=\\\"https://github.com/sage-scm/Flash\\\"&gt;https://github.com/sage-scm/Flash&lt;/a&gt;&lt;/li&gt;\\n&lt;li&gt;&lt;strong&gt;Crates.io&lt;/strong&gt;: &lt;code&gt;cargo install flash-watcher&lt;/code&gt;&lt;/li&gt;\\n&lt;li&gt;&lt;strong&gt;Benchmarks&lt;/strong&gt;: &lt;a href=\\\"https://github.com/sage-scm/Flash/blob/main/PERFORMANCE.md\\\"&gt;PERFORMANCE.md&lt;/a&gt; (with actual numbers)&lt;/li&gt;\\n&lt;/ul&gt;\\n\\n&lt;p&gt;I&amp;#39;m not trying to replace watchexec or anything - just scratching my own itch and learning Rust. If it&amp;#39;s useful to others, great! If not, at least I learned a lot building it.&lt;/p&gt;\\n\\n&lt;p&gt;Would love any feedback, criticism, or suggestions. Thanks for reading! \\ud83d\\ude4f&lt;/p&gt;\\n\\n&lt;hr/&gt;\\n\\n&lt;p&gt;&lt;em&gt;P.S. - Yes, I know &amp;quot;blazingly fast&amp;quot; is a meme at this point, but the startup time difference is actually noticeable in practice&lt;/em&gt;&lt;/p&gt;\\n&lt;/div&gt;&lt;!-- SC_ON --&gt;\", \"likes\": null, \"suggested_sort\": null, \"banned_at_utc\": null, \"view_count\": null, \"archived\": false, \"no_follow\": false, \"is_crosspostable\": true, \"pinned\": false, \"over_18\": false, \"all_awardings\": [], \"awarders\": [], \"media_only\": false, \"can_gild\": false, \"spoiler\": false, \"locked\": false, \"author_flair_text\": null, \"treatment_tags\": [], \"visited\": false, \"removed_by\": null, \"num_reports\": null, \"distinguished\": null, \"subreddit_id\": \"t5_2s7lj\", \"author_is_blocked\": false, \"mod_reason_by\": null, \"removal_reason\": null, \"link_flair_background_color\": \"\", \"id\": \"1ktagin\", \"is_robot_indexable\": true, \"report_reasons\": null, \"author\": \"Crazywolf132\", \"discussion_type\": null, \"num_comments\": 14, \"send_replies\": true, \"contest_mode\": false, \"mod_reports\": [], \"author_patreon_flair\": false, \"author_flair_text_color\": null, \"permalink\": \"/r/rust/comments/1ktagin/i_built_a_file_watcher_in_rust_thats_faster_than/\", \"stickied\": false, \"url\": \"https://www.reddit.com/r/rust/comments/1ktagin/i_built_a_file_watcher_in_rust_thats_faster_than/\", \"subreddit_subscribers\": 347880, \"created_utc\": 1747973115.0, \"num_crossposts\": 0, \"media\": null, \"is_video\": false}}, {\"kind\": \"t3\", \"data\": {\"approved_at_utc\": null, \"subreddit\": \"rust\", \"selftext\": \"Here is [Capter](https://github.com/decipher3114/Capter), a cross-platform screenshot and annotations app. Made with Iced UI library.  \\nIt's fast, lightweight and allows basic configuration.\\n\\nScreenshot modes:\\n\\n* Fullscreen\\n* Window\\n* Cropped\\n\\nAnnotation tools:\\n\\n* Rectangle (Filled, Outlined)\\n* Ellipse (Filled, Outlined)\\n* FreeHand\\n* Line\\n* Arrow\\n* Text\\n* Highlighter\\n\\nLooking for suggestions and contributions.\", \"author_fullname\": \"t2_un5s5she\", \"saved\": false, \"mod_reason_title\": null, \"gilded\": 0, \"clicked\": false, \"title\": \"Screenshot and Annotation Tool (Iced)\", \"link_flair_richtext\": [], \"subreddit_name_prefixed\": \"r/rust\", \"hidden\": false, \"pwls\": 6, \"link_flair_css_class\": \"\", \"downs\": 0, \"top_awarded_type\": null, \"hide_score\": false, \"name\": \"t3_1kswjab\", \"quarantine\": false, \"link_flair_text_color\": \"dark\", \"upvote_ratio\": 0.85, \"author_flair_background_color\": null, \"subreddit_type\": \"public\", \"ups\": 22, \"total_awards_received\": 0, \"media_embed\": {}, \"author_flair_template_id\": null, \"is_original_content\": false, \"user_reports\": [], \"secure_media\": null, \"is_reddit_media_domain\": false, \"is_meta\": false, \"category\": null, \"secure_media_embed\": {}, \"link_flair_text\": \"\\ud83d\\udee0\\ufe0f project\", \"can_mod_post\": false, \"score\": 22, \"approved_by\": null, \"is_created_from_ads_ui\": false, \"author_premium\": false, \"thumbnail\": \"\", \"edited\": false, \"author_flair_css_class\": null, \"author_flair_richtext\": [], \"gildings\": {}, \"content_categories\": null, \"is_self\": true, \"mod_note\": null, \"created\": 1747934746.0, \"link_flair_type\": \"text\", \"wls\": 6, \"removed_by_category\": null, \"banned_by\": null, \"author_flair_type\": \"text\", \"domain\": \"self.rust\", \"allow_live_comments\": false, \"selftext_html\": \"&lt;!-- SC_OFF --&gt;&lt;div class=\\\"md\\\"&gt;&lt;p&gt;Here is &lt;a href=\\\"https://github.com/decipher3114/Capter\\\"&gt;Capter&lt;/a&gt;, a cross-platform screenshot and annotations app. Made with Iced UI library.&lt;br/&gt;\\nIt&amp;#39;s fast, lightweight and allows basic configuration.&lt;/p&gt;\\n\\n&lt;p&gt;Screenshot modes:&lt;/p&gt;\\n\\n&lt;ul&gt;\\n&lt;li&gt;Fullscreen&lt;/li&gt;\\n&lt;li&gt;Window&lt;/li&gt;\\n&lt;li&gt;Cropped&lt;/li&gt;\\n&lt;/ul&gt;\\n\\n&lt;p&gt;Annotation tools:&lt;/p&gt;\\n\\n&lt;ul&gt;\\n&lt;li&gt;Rectangle (Filled, Outlined)&lt;/li&gt;\\n&lt;li&gt;Ellipse (Filled, Outlined)&lt;/li&gt;\\n&lt;li&gt;FreeHand&lt;/li&gt;\\n&lt;li&gt;Line&lt;/li&gt;\\n&lt;li&gt;Arrow&lt;/li&gt;\\n&lt;li&gt;Text&lt;/li&gt;\\n&lt;li&gt;Highlighter&lt;/li&gt;\\n&lt;/ul&gt;\\n\\n&lt;p&gt;Looking for suggestions and contributions.&lt;/p&gt;\\n&lt;/div&gt;&lt;!-- SC_ON --&gt;\", \"likes\": null, \"suggested_sort\": null, \"banned_at_utc\": null, \"view_count\": null, \"archived\": false, \"no_follow\": false, \"is_crosspostable\": true, \"pinned\": false, \"over_18\": false, \"all_awardings\": [], \"awarders\": [], \"media_only\": false, \"link_flair_template_id\": \"53b37c18-f8ea-11ed-80c5-f2e313d34a84\", \"can_gild\": false, \"spoiler\": false, \"locked\": false, \"author_flair_text\": null, \"treatment_tags\": [], \"visited\": false, \"removed_by\": null, \"num_reports\": null, \"distinguished\": null, \"subreddit_id\": \"t5_2s7lj\", \"author_is_blocked\": false, \"mod_reason_by\": null, \"removal_reason\": null, \"link_flair_background_color\": \"#f2f2f2\", \"id\": \"1kswjab\", \"is_robot_indexable\": true, \"report_reasons\": null, \"author\": \"decipher3114\", \"discussion_type\": null, \"num_comments\": 0, \"send_replies\": true, \"contest_mode\": false, \"mod_reports\": [], \"author_patreon_flair\": false, \"author_flair_text_color\": null, \"permalink\": \"/r/rust/comments/1kswjab/screenshot_and_annotation_tool_iced/\", \"stickied\": false, \"url\": \"https://www.reddit.com/r/rust/comments/1kswjab/screenshot_and_annotation_tool_iced/\", \"subreddit_subscribers\": 347880, \"created_utc\": 1747934746.0, \"num_crossposts\": 0, \"media\": null, \"is_video\": false}}, {\"kind\": \"t3\", \"data\": {\"approved_at_utc\": null, \"subreddit\": \"rust\", \"selftext\": \"Hey r/rust! \\ud83d\\udc4b\\n\\nI've been working on this project for the past 5 months and just released a major update. KelpsGet started as my way to learn Rust more deeply - building a wget alternative seemed like a good practical project.\\n\\nWhat began as a simple HTTP downloader has grown into something much more feature-rich:\\n\\n**New in v0.1.4:**\\n\\n* GUI interface (using eframe/egui)\\n* Multi-protocol support: HTTP/HTTPS, FTP, SFTP, torrents\\n* Parallel downloads with resume capability\\n* Cross-platform builds\\n\\n**The Rust learning journey has been incredible:**\\n\\n* Async programming with Tokio\\n* GUI development with egui (surprisingly pleasant!)\\n* Working with multiple crates for different protocols\\n* Error handling patterns across different network operations\\n\\nThe most challenging part was getting the GUI and CLI to share the same download logic without code duplication. Rust's type system really helped here - once it compiled, it usually just worked.\\n\\n**Current tech stack:**\\n\\n* `tokio` for async operations\\n* `reqwest` for HTTP client\\n* `eframe` for GUI\\n* `clap` for CLI parsing\\n* Plus protocol-specific crates for FTP/SFTP/torrents\\n\\n**Try it:**\\n\\n    cargo install kelpsget\\n    kelpsget --gui  # for GUI mode\\n    \\n\\nGitHub: [https://github.com/davimf721/KelpsGet](https://github.com/davimf721/KelpsGet)\\n\\nI'm really happy with how this turned out and would love feedback from the Rust community. Any suggestions for improvements or features you'd find useful?\\n\\nAlso looking for contributors if anyone's interested in helping out! \\ud83e\\udd80  \\n  \\n\", \"author_fullname\": \"t2_7af5klmc\", \"saved\": false, \"mod_reason_title\": null, \"gilded\": 0, \"clicked\": false, \"title\": \"After 5 months of development, I finally released KelpsGet v0.1.4 - A modern download manager in Rust\", \"link_flair_richtext\": [], \"subreddit_name_prefixed\": \"r/rust\", \"hidden\": false, \"pwls\": 6, \"link_flair_css_class\": \"\", \"downs\": 0, \"top_awarded_type\": null, \"hide_score\": false, \"name\": \"t3_1kt69vh\", \"quarantine\": false, \"link_flair_text_color\": \"dark\", \"upvote_ratio\": 0.87, \"author_flair_background_color\": null, \"subreddit_type\": \"public\", \"ups\": 22, \"total_awards_received\": 0, \"media_embed\": {}, \"author_flair_template_id\": null, \"is_original_content\": false, \"user_reports\": [], \"secure_media\": null, \"is_reddit_media_domain\": false, \"is_meta\": false, \"category\": null, \"secure_media_embed\": {}, \"link_flair_text\": \"\\ud83d\\udee0\\ufe0f project\", \"can_mod_post\": false, \"score\": 22, \"approved_by\": null, \"is_created_from_ads_ui\": false, \"author_premium\": false, \"thumbnail\": \"\", \"edited\": false, \"author_flair_css_class\": null, \"author_flair_richtext\": [], \"gildings\": {}, \"content_categories\": null, \"is_self\": true, \"mod_note\": null, \"created\": 1747959753.0, \"link_flair_type\": \"text\", \"wls\": 6, \"removed_by_category\": null, \"banned_by\": null, \"author_flair_type\": \"text\", \"domain\": \"self.rust\", \"allow_live_comments\": false, \"selftext_html\": \"&lt;!-- SC_OFF --&gt;&lt;div class=\\\"md\\\"&gt;&lt;p&gt;Hey &lt;a href=\\\"/r/rust\\\"&gt;r/rust&lt;/a&gt;! \\ud83d\\udc4b&lt;/p&gt;\\n\\n&lt;p&gt;I&amp;#39;ve been working on this project for the past 5 months and just released a major update. KelpsGet started as my way to learn Rust more deeply - building a wget alternative seemed like a good practical project.&lt;/p&gt;\\n\\n&lt;p&gt;What began as a simple HTTP downloader has grown into something much more feature-rich:&lt;/p&gt;\\n\\n&lt;p&gt;&lt;strong&gt;New in v0.1.4:&lt;/strong&gt;&lt;/p&gt;\\n\\n&lt;ul&gt;\\n&lt;li&gt;GUI interface (using eframe/egui)&lt;/li&gt;\\n&lt;li&gt;Multi-protocol support: HTTP/HTTPS, FTP, SFTP, torrents&lt;/li&gt;\\n&lt;li&gt;Parallel downloads with resume capability&lt;/li&gt;\\n&lt;li&gt;Cross-platform builds&lt;/li&gt;\\n&lt;/ul&gt;\\n\\n&lt;p&gt;&lt;strong&gt;The Rust learning journey has been incredible:&lt;/strong&gt;&lt;/p&gt;\\n\\n&lt;ul&gt;\\n&lt;li&gt;Async programming with Tokio&lt;/li&gt;\\n&lt;li&gt;GUI development with egui (surprisingly pleasant!)&lt;/li&gt;\\n&lt;li&gt;Working with multiple crates for different protocols&lt;/li&gt;\\n&lt;li&gt;Error handling patterns across different network operations&lt;/li&gt;\\n&lt;/ul&gt;\\n\\n&lt;p&gt;The most challenging part was getting the GUI and CLI to share the same download logic without code duplication. Rust&amp;#39;s type system really helped here - once it compiled, it usually just worked.&lt;/p&gt;\\n\\n&lt;p&gt;&lt;strong&gt;Current tech stack:&lt;/strong&gt;&lt;/p&gt;\\n\\n&lt;ul&gt;\\n&lt;li&gt;&lt;code&gt;tokio&lt;/code&gt; for async operations&lt;/li&gt;\\n&lt;li&gt;&lt;code&gt;reqwest&lt;/code&gt; for HTTP client&lt;/li&gt;\\n&lt;li&gt;&lt;code&gt;eframe&lt;/code&gt; for GUI&lt;/li&gt;\\n&lt;li&gt;&lt;code&gt;clap&lt;/code&gt; for CLI parsing&lt;/li&gt;\\n&lt;li&gt;Plus protocol-specific crates for FTP/SFTP/torrents&lt;/li&gt;\\n&lt;/ul&gt;\\n\\n&lt;p&gt;&lt;strong&gt;Try it:&lt;/strong&gt;&lt;/p&gt;\\n\\n&lt;pre&gt;&lt;code&gt;cargo install kelpsget\\nkelpsget --gui  # for GUI mode\\n&lt;/code&gt;&lt;/pre&gt;\\n\\n&lt;p&gt;GitHub: &lt;a href=\\\"https://github.com/davimf721/KelpsGet\\\"&gt;https://github.com/davimf721/KelpsGet&lt;/a&gt;&lt;/p&gt;\\n\\n&lt;p&gt;I&amp;#39;m really happy with how this turned out and would love feedback from the Rust community. Any suggestions for improvements or features you&amp;#39;d find useful?&lt;/p&gt;\\n\\n&lt;p&gt;Also looking for contributors if anyone&amp;#39;s interested in helping out! \\ud83e\\udd80  &lt;/p&gt;\\n&lt;/div&gt;&lt;!-- SC_ON --&gt;\", \"likes\": null, \"suggested_sort\": null, \"banned_at_utc\": null, \"view_count\": null, \"archived\": false, \"no_follow\": false, \"is_crosspostable\": true, \"pinned\": false, \"over_18\": false, \"all_awardings\": [], \"awarders\": [], \"media_only\": false, \"link_flair_template_id\": \"53b37c18-f8ea-11ed-80c5-f2e313d34a84\", \"can_gild\": false, \"spoiler\": false, \"locked\": false, \"author_flair_text\": null, \"treatment_tags\": [], \"visited\": false, \"removed_by\": null, \"num_reports\": null, \"distinguished\": null, \"subreddit_id\": \"t5_2s7lj\", \"author_is_blocked\": false, \"mod_reason_by\": null, \"removal_reason\": null, \"link_flair_background_color\": \"#f2f2f2\", \"id\": \"1kt69vh\", \"is_robot_indexable\": true, \"report_reasons\": null, \"author\": \"Davimf72212\", \"discussion_type\": null, \"num_comments\": 0, \"send_replies\": true, \"contest_mode\": false, \"mod_reports\": [], \"author_patreon_flair\": false, \"author_flair_text_color\": null, \"permalink\": \"/r/rust/comments/1kt69vh/after_5_months_of_development_i_finally_released/\", \"stickied\": false, \"url\": \"https://www.reddit.com/r/rust/comments/1kt69vh/after_5_months_of_development_i_finally_released/\", \"subreddit_subscribers\": 347880, \"created_utc\": 1747959753.0, \"num_crossposts\": 0, \"media\": null, \"is_video\": false}}], \"before\": null}}"